--Comando para criação de tabelas no banco de dados:
--Criação da tabela "pessoa".
create table pessoa (
CPF varchar (12) NOT NULL,
DataNascimento date NOT NULL,
email varchar(30) NOT NULL,
endereco varchar(70) NOT NULL,
foto BLOB,
nome varchar(40) NOT NULL,
senha varchar(8) NOT NULL,
telefone varchar(13) NOT NULL,
TipoPessoa varchar(15) NOT NULL check (TipoPessoa = 'Cliente' or TipoPessoa = 'Colaborador'),
primary key (CPF)
);
--Criação da tabela "filial".
create table filial (
endereco varchar(70) NOT NULL,
IdFilial serial NOT NULL,
telefone varchar(13) NOT NULL,
primary key (IdFilial)
);
--Criação da tabela "cliente".
create table cliente (
CPF varchar(12) NOT NULL,
DiaDaSemana varchar(15) NOT NULL,
horario time NOT NULL,
IdFilial serial NOT NULL,
primary key (CPF),
foreign key (CPF) references pessoa(CPF),
foreign key (IdFilial) references filial(IdFilial),
);
--Criação da tabela "mensalidade".
create table mensalidade (
CPF varchar(12) NOT NULL,
DataPagamento date NOT NULL,
status varchar(25) NOT NULL check (status = 'Em débito' or status = 'Pagamento Efetuado'),
valor float NOT NULL,
primary key (CPF),
foreign key (CPF) references cliente(CPF)
);
--Criação da tabela "funcionario".
create table funcionario (
CPF varchar(12) NOT NULL,
funcao varchar(15) NOT NULL check (funcao = 'Professor' or funcao = 'Recepcionista'),
IdFilial serial NOT NULL, 
salario decimal(6,2) NOT NULL,
primary key (CPF),
foreign key (CPF) references pessoa(CPF),
foreign key (IdFilial) references filial(IdFilial)
);
--Criação da tabela "parceiro".
create table parceiro (
CNPJ	varchar(20)	NOT NULL
email varchar(30) NOT NULL,
endereco varchar(70) NOT NULL,
imagem BLOB,
nome varchar(40) NOT NULL,
telefone varchar(13) NOT NULL,
primary key (CNPJ)
);
--Criação da tabela "treinamento".
create table treinamento (
NomeTreinamento varchar(20) NOT NULL,
primary key (NomeTreinamento)
);
--Criação da tabela "exercicio".
create table exercicio (
descricao varchar(100) NOT NULL,
link varchar(100),
NomeExercicio varchar(20) NOT NULL,
primary key (NomeExercicio)
);
--Criação da tabela "executa".
create table executa (
CPF varchar(12) NOT NULL,
NomeTreinamento varchar(20) NOT NULL,
primary key (CPF, NomeTreinamento),
foreign key (CPF) references cliente(CPF),
foreign key (NomeTreinamento) references treinamento(NomeTreinamento)
);
--Criação da tabela "contem".
create table contem (
NomeExercicio varchar(20) NOT NULL,
NomeTreinamento varchar(20) NOT NULL,
primary key (NomeExercicio, NomeTreinamento),
foreign key (NomeExercicio) references exercicio(NomeExercicio),
foreign key (NomeTreinamento) references treinamento(NomeTreinamento)
);
--Criação da tabela "avalFisica".
create table avalFisica (
altura decimal(3,2) NOT NULL check (altura <= 2.10 and altura >= 1.50),
biceps float NOT NULL,
cintura float NOT NULL,
coxa float NOT NULL,
CPF varchar(12) NOT NULL,
data date NOT NULL,
gordura float NOT NULL,
peso decimal(5,2) NOT NULL check (peso <= 160 and peso >= 35),
PressaoArt float NOT NULL,
triceps float NOT NULL,
primary key (CPF),
foreign key (CPF) references cliente(CPF)
); 
--Criação da tabela "depoimentos".
create table depoimentos (
CPF varchar(12) NOT NULL,
descricao varchar(250) NOT NULL,
status varchar(25) NOT NULL check (status = 'Aprovado' or status = 'Cancelado'),
primary key (CPF),
foreign key (CPF) references cliente(CPF)
); 
--Criação da tabela "agendamento".
create table agendamento (
data date NOT NULL,
descricaoCancelamento varchar(90) NOT NULL,
horario time NOT NULL,
professor varchar(12) NOT NULL,
status varchar(25) NOT NULL check (status = 'Aguardando' or status = 'Aprovado' or status = 'Cancelado'),
primary key (data, horario)
foreign key (professor) references funcionario(CPF)
); 
--Criação da tabela "realiza".
create table realiza (
CPF varchar(12) NOT NULL,
primary key (CPF),
foreign key (CPF) references cliente(CPF),
); 
--Criação da tabela "agendamentoAvalFisica".
create table agendamentoAvalFisicaMensal (
data date NOT NULL,
horario time NOT NULL,
primary key (data, horario),
foreign key (data) references agendamento(data),
foreign key (horario) references agendamento(horario)
); 
--Criação da tabela "agendamentoAulaExp".
create table agendamentoAulaExp (
data date NOT NULL,
email varchar(30) NOT NULL UNIQUE,
horario time NOT NULL,
IdFilial serial NOT NULL,
modalidadeTreinamento varchar(20),
nome varchar(40) NOT NULL,
telefone varchar(13) NOT NULL,
primary key (data, email, horario, Idfilial),
foreign key (Idfilial) references filial(Idfilial),
foreign key (data) references agendamento(data)
foreign key (horario) references agendamento(horario)
); 
--Criação da tabela "relatorio".
create table relatorio(
CPF varchar(12) NOT NULL,
IdFilial serial NOT NULL,
mes date NOT NULL,
NomeTreinamento varchar(20) NOT NULL,
primary key (IdFilial, mes),
foreign key (CPF) references cliente(CPF),
foreign key (IdFilial) references filial(IdFilial),
foreign key (NomeTreinamento) references treinamento(NomeTreinamento),
);
--Criação da tabela "ticket".
create table ticket(
anexo LONGBLOB NULL,
classificacao varchar(30) NOT NULL check (classificacao = 'Incidente', classificacao = 'Melhoria' or classificacao = 'Dúvida'),
CPF varchar(12) NOT NULL,
descricao varchar(1000) NOT NULL,
IdTicket serial NOT NULL,
prioridade varchar(30) NOT NULL check (prioridade = 'Alta', prioridade = 'Média' or prioridade = 'Baixa'),
status varchar(10) NOT NULL check (status = 'Aberto', status = 'Em Progresso', status = 'Em Revisão' or status = 'Fechado'),
titulo varchar(80) NOT NULL,
primary key (IdTicket),
foreign key (CPF) references cliente(CPF),
);
--Criação da tabela "manuais".
create table manuais(
arquivo LONGBLOB NOT NULL,
IdManual serial NOT NULL,
nome varchar(80) NOT NULL,
primary key (IdManual)
);
--Comando para consulta simultânea de registros em várias tabelas - inner join:
select nome, c.CPF, NomeTreinamento, valor, DataPagamento
from pessoa p inner join cliente c on p.CPF = c.CPF inner join executa e on c.CPF = e.CPF inner join mensalidade m on c.CPF = m.CPF;
--A consulta acima retorna os campos "nome", "CPF", "NomeTreinamento", "valor" e "DataPagamento". Coluna relacionada entre as tabelas: a foreign key comum para as tabelas "cliente" e "pessoa" é "CPF"; a foreign key comum para "cliente" "executa" é "CPF" e a foreign key comum para "cliente" e "mensalidade" é "CPF".
--Comando para criação de uma view:
CREATE VIEW info_funcionarios AS
SELECT nome, p.CPF, endereco, telefone, email, IdFilial, funcao
FROM pessoa p INNER JOIN funcionario c ON p.CPF = c.CPF
ORDER BY nome ASC;
--A view acima retorna nome de funcionários, CPF, endereço, telefone, email, filial de trabalho e função, restringindo a informação de salários. 
--Comando para subconsulta:
select Resultado.mensalidade, Count(Resultado.cliente) as Total_clientes
from (Select ms.valor as Mensalidade, p.nome as cliente from pessoa as p inner join cliente as cl on p.CPF = cl.CPF inner join mensalidade as ms on ms.CPF = cl.CPF) as Resultado group by Resultado.mensalidade;
--A subconsulta acima retorna os valores de mensalidades e a quantidade de alunos que efetuam o pagamento a cada um destes valores.